# -*- coding: utf-8 -*-
"""6.SVM(SUPPORT Vector Regression)-Banglore House price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FL0YyZd_v2QWJPLJy1AAAEBKhAE6A8Ah

# BUSINESS PROBLEM- Predict thr price of Banglore House

## Using support Vector Regression - Supervised Machine Learning Algorithms

### Import Library
"""

import pandas as pd

"""0. NOTES FOr LOAD Data from Googe Drive

    1. "https://drive.google.com/file/d/1zFfeKHIPo5i8kj-KOIuMIa-ANakxCeAN/view?usp=sharing"   --> Orignl Data
     2. id=1zFfeKHIPo5i8kj-KOIuMIa-ANakxCeAN ----->this we get from orignal link this it is present b/w (/d/********/view?)

  3. https://drive.google.com/uc?export=download&id=  ===>>At id=(we place the id 
of orignal link)

### Load Data
"""

# https://drive.google.com/file/d/115CTA-tBV8a_VFYzUCk_MkaAJIq4xBAt/view?usp=sharing

path=r"https://drive.google.com/uc?export=download&id=115CTA-tBV8a_VFYzUCk_MkaAJIq4xBAt"
df=pd.read_csv(path)

df.head()

"""### Split Data"""

X=df.drop('price',axis=1)    #Independent variable
y=df['price']                # Dependent variable

print("Shape of x=",X.shape)   #107 features or columns
print("Shape of y=",y.shape)   # only one feature price

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=51)   # Test percentage data=20 AND Remaining are train data

print("Shape of x_train=",X_train.shape)
print("Shape of x_test=",X_test.shape)   
print("Shape of y_train=",y_train.shape)
print("Shape of y_test=",y_test.shape)

"""### Feature Scaling"""

# By Doing this we get data in one format like cm,ft,m,all in one format
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
sc.fit(X_train)
X_train=sc.transform(X_train)
X_test=sc.transform(X_test)

"""##  support Vector Regression - ML_Model training"""

from sklearn.svm import SVR

# Parameter in SVR
 #SVR(*, kernel="rbf", degree=3, gamma="scale", coef0=0, tol=0.001, C=1, epsilon=0.1, shrinking=True, cache_size=200, verbose=False, max_iter=- 1) -> None

svr_rbf=SVR(kernel="rbf")

# Parameter in fit and score
# fit(X, y, sample_weight=None) -> SVR
svr_rbf.fit(X_train,y_train)   #Train
svr_rbf.score(X_test,y_test)   #Accuracy test (result=Not Good)

# Now kernal="linear"
svr_linear=SVR(kernel="linear")
svr_linear.fit(X_train,y_train)   #Train
svr_linear.score(X_test,y_test)   #Accuracy is Very good

# Now kernal="polynomial"      SVR(*, kernel="rbf", degree=3, gamma="scale", coef0=0, tol=0.001, C=1, epsilon=0.1, shrinking=True, cache_size=200, verbose=False, max_iter=- 1) -> None
svr_poly=SVR(kernel="poly",degree=2,)   # Bydefault degree 3
svr_poly.fit(X_train,y_train)   #Train
svr_poly.score(X_test,y_test)   #Accuracy is Very bad

"""## Pridict the Peice Of House AND Test"""

# VAlue of 1st HOME OR 1ST ROW OF ALL 107 Features

X_test[0]

""" Using Linear kernal We predict House price Because Its result is very Accurate"""

# PRice OF 1st House
svr_linear.predict([X_test[0]])

# Price Of All House Present in X_test
y_pred=svr_linear.predict(X_test)
y_pred

# Orignal Price Of House
y_test

"""y_pre=86lakh
 actual=80 lakh

#### Root mean Square Error
"""

from sklearn.metrics import mean_squared_error
import numpy as np

mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
print("MSE=",mse)
print("RMSE",rmse)



"""# SUPPORT Vector Regression

### 1.Linear SUPPORT Vector Regression(LSVR)
### 2.Non-Linear SUPPORT Vector Regression(NLSVR)

1.)We rarerly Used Support vector Regression

    By Using Support vector Regression We Solve Supervised Regression Problem    
    Ex--> By Knowing Height We find the Weight

  2.)We mostly used Support Vector Classifier

    By Using Support Vector Classifier We Solve Supervised Classification    Problems.
     Ex- Classify Male,female,Dog Cat
"""

