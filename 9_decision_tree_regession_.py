# -*- coding: utf-8 -*-
"""9. Decision Tree Regession .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15EhzOmZD925jybE81QTFS733JrEbFTr2

# BUSINESS PROBLEM- Predict the price of Banglore House

## Decision Tree Regession - Supervised Machine Learning Algorithms

### Import Library
"""

import pandas as pd
import numpy as np

"""0. NOTES FOr LOAD Data from Googe Drive
1. "https://drive.google.com/file/d/1zFfeKHIPo5i8kj-KOIuMIa-ANakxCeAN/view?usp=sharing"   -->Orignl Data
2. id=1zFfeKHIPo5i8kj-KOIuMIa-ANakxCeAN ----->this we get from orignal link this it is present b/w (/d/********/view?)

3. https://drive.google.com/uc?export=download&id=  ===>>At id=(we place the id 
of orignal link)
"""

# https://drive.google.com/file/d/115CTA-tBV8a_VFYzUCk_MkaAJIq4xBAt/view?usp=sharing

path=r"https://drive.google.com/uc?export=download&id=115CTA-tBV8a_VFYzUCk_MkaAJIq4xBAt"
df=pd.read_csv(path)

df.head()

"""## Split Data"""

X=df.drop('price',axis=1)    #Independent variable
y=df['price']                # Dependent variable

print("Shape of x=",X.shape)   #107 features or columns
print("Shape of y=",y.shape)   # only one feature price

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=52)   # Test percentage data=20 AND Remaining are train data

print("Shape of x_train=",X_train.shape)
print("Shape of x_test=",X_test.shape)   
print("Shape of y_train=",y_train.shape)
print("Shape of y_test=",y_test.shape)

"""##### Feature Scaling

## Decision Tree Regession - ML_Model training
"""

from sklearn.tree import DecisionTreeRegressor

regressor = DecisionTreeRegressor(criterion='mse')   #parameter -->, criterion="squared_error", splitter="best", max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0, max_features=None, random_state=None, max_leaf_nodes=None, min_impurity_decrease=0, ccp_alpha=0) -> None
# Train the  model                                                  #criterion : {"squared_error", "friedman_mse", "absolute_error",  }
regressor.fit(X_train,y_train)

# Accuracy or Score=97% very Good
regressor.score(X_test,y_test)

"""### Predict House price"""

X_test.iloc[-1, :]     # Return the LAst Home ANd all Its Features

# Price Of Last Home is 81 lakh
regressor.predict([X_test.iloc[-1,:]])

# Orignal Price OF House Its Prediction is almost same
y_test.iloc[-1]

# Price Prediction OF Multiple House
pred=regressor.predict(X_test)
pred

#Orignal Price of House
y_test

